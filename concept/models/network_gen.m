addpath("classes","functions","models");
%deepNetworkDesigner

window_size = 60;
no_samples = 1e4;
no_sets = 10;
prediction_length = 1;
time_before = 60*24*60;
time_after = 7*24*60;

[xVal,yVal] = deal({},{});

options = trainingOptions('adam',...
    'GradientDecayFactor',0.9,...
    'SquaredGradientDecayFactor',0.999,...
    'Epsilon',1e-8,...
    'InitialLearnRate',0.0001,...
    'LearnRateSchedule','piecewise',...
    'LearnRateDropFactor',0.9,...
    'LearnRateDropPeriod',5,...
    'L2Regularization',0.0001,...
    'GradientThresholdMethod','l2norm',...
    'GradientThreshold',inf,...
    'MaxEpochs',30,...
    'MiniBatchSize',64,...
    'Verbose',true,...
    'VerboseFrequency',ceil(no_samples/64),...
    'ValidationData',{xVal,yVal},...
    'ValidationFrequency',ceil(no_samples/64),...
    'ValidationPatience',Inf,...
    'Shuffle','every-epoch',...
    'ExecutionEnvironment','gpu',...
    'plots','none');



for i = 1:no_sets
    %options.InitialLearnRate = 0.0001;
    %options.MaxEpochs = 5;
    [train_samples,eval_samples] = get_samples("BTCUSDT.txt",1,30,time_before,time_after);
    %model = layers_1;
    model = lgraph_1;
    [xData,yData] = subsample(train_samples{1},no_samples,window_size,prediction_length);
    [xVal,yVal] = subsample(eval_samples{1},0.2*no_samples,window_size,prediction_length);
    
    
    options.ValidationData = {xVal,yVal};
    model = trainNetwork(xData,yData,model,options);
    
    %options.InitialLearnRate = 10*options.InitialLearnRate;
    %options.MaxEpochs = 30;
    %model = trainNetwork(xData,yData,layerGraph(model),options)

    evaluate_model(eval_samples{1},model,window_size,prediction_length,false); 

end